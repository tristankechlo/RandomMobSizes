plugins {
    id 'java-library'
}

base {
    archivesName = "${mod_file_name}-${project.name}-${minecraft_version}-${mod_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
}

repositories {
    mavenCentral()
    exclusiveContent {
        forRepository {
            maven {
                name = 'Sponge'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        filter { includeGroupAndSubgroups("org.spongepowered") }
    }
    maven {
        name = 'BlameJared'
        url = 'https://maven.blamejared.com'
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
}

dependencies {
    implementation 'org.jetbrains:annotations:24.1.0'
}

['apiElements', 'runtimeElements'].each { variant ->
    configurations."$variant".outgoing {
        capability("$group:$mod_id-${project.name}-${minecraft_version}:$version")
        capability("$group:$mod_id:$version")
    }
}

jar {
    from rootProject.file('LICENSE')
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version
        ])
    }
}

processResources {
    def expandProps = [
            "version"                   : "${minecraft_version}-${mod_version}",
            "version_range"             : version_range,
            "minecraft_version"         : minecraft_version,
            "java_version"              : java_version,
            "fabric_loader_min"         : fabric_loader_min,
            "fabric_range_min_inclusive": fabric_range_min_inclusive,
            "fabric_range_max_exclusive": fabric_range_max_exclusive,
            "forge_loader_range"        : forge_loader_range,
            "neoforge_loader_range"     : neoforge_loader_range,
            "neoforge_range"            : neoforge_range
    ]

    filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
        expand expandProps
    }
    inputs.properties(expandProps)
}
